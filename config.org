* Custom functions
** Edit this config

   #+BEGIN_SRC emacs-lisp
  (defun edit-config ()
    "Edit config.org"
    (interactive)
    (find-file (expand-file-name "config.org" user-emacs-directory)))

  (defun reload-config ()
    "Compile config.org and execute config.el"
    (interactive)
    (require 'org)
    (org-babel-load-file (expand-file-name "config.org" user-emacs-directory))
    (byte-compile-file (expand-file-name "config.el" user-emacs-directory)))
   #+END_SRC

* Setup
** Increase garbage collector threshold

   The default garbage collection threshold is 800kB, increasing this to 64MB to increase the startup speed.
   Do not forget to reset it to a reasonable value after.

   #+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 64000000)

  ;; Restore after startup
  (add-hook 'after-init-hook
            (lambda ()
              (setq gc-cons-threshold 1000000)
              (message "gc-cons-threshold restored to %S"
                       gc-cons-threshold)))
   #+END_SRC

** Load custom variables

   This makes emacs use the .custom file for its custom variable rather than modifying our init.el file.

   #+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name ".custom" user-emacs-directory))
  (if (file-exists-p custom-file)
      (load custom-file))
   #+END_SRC

** Configure package sources

   Add repositories from which we'll load packages. Setting =package-enable-at-startup= to =nil= prevents a second package load and slightly improves startup time.

   #+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)
  (setq package-enable-at-startup nil)
   #+END_SRC

** Bootstrap use-package

   Refresh package if it is needed.
   If =use-package= is not installed, install it.

   #+BEGIN_SRC emacs-lisp
  (unless package-archive-contents
    (message "Refreshing package archives...")
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (message "`use-package' not found.  Installing...")
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-minimum-reported-time 0
        use-package-verbose t)
   #+END_SRC

   By default all packages should be installed from package manager as that's the usual path. This is equivalent to setting =:ensure t= on each call to =use-package=. To disable set =:ensure nil= (this is done automatically for any packages using =:load-path= so shouldn't generally be needed).

   #+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
   #+END_SRC

** Startup profiling

   Use esup to profile and optimize the startup time.

   #+BEGIN_SRC emacs-lisp
  (use-package esup
    :ensure t
    :defer t)
   #+END_SRC

** Performance trick

   Garbage-collect on focus-out, Emacs should feel snappier.

   #+BEGIN_SRC emacs-lisp
  (add-hook 'focus-out-hook #'garbage-collect)
   #+END_SRC

* Preferences

  Don't display the help screen on startup.

  #+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  #+END_SRC

  I prefer lines to wrap.

  #+BEGIN_SRC emacs-lisp
  (global-visual-line-mode 1)
  #+END_SRC

  Let's turn off unwanted window decoration.

  #+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode    -1)
  (menu-bar-mode   -1)
  #+END_SRC

  I don't want the error bell.

  #+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
  #+END_SRC

  Make the =yes or no= prompts shorter.

  #+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

  A common frustration with new Emacs users is the =filename#= files created. This centralises the backup files created as you edit.

  #+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )
  #+END_SRC

  I usually don't want tabs, if I do I can set this buffer-local to =t=. If I just want one tab then use =C-q= (=quoted-insert=) to insert as a literal.

  #+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  #+END_SRC

  I *never* want whitespace at the end of lines. Remove it on save.

  #+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  #+END_SRC

  Change the \*scratch\* buffer's to prog-mode, I dont like Lisp.

  #+BEGIN_SRC emacs-lisp
  (setq-default initial-major-mode 'prog-mode)
  (setq-default initial-scratch-message "")
  #+END_SRC

* Appearance
** Editor
   Set a color scheme

   #+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq-default doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
    ;; may have their own settings.
    (load-theme 'doom-dracula t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
   #+END_SRC

   Highlight current buffer (only works with doom-themes).

   #+BEGIN_SRC emacs-lisp
  (use-package solaire-mode
    :hook ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
    :config
    (add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)
    (solaire-mode-swap-bg))
   #+END_SRC

   Set a nice font.

   #+BEGIN_SRC emacs-lisp
  (set-frame-font "IBM Plex Mono 13" nil t)
   #+END_SRC

   Highlight the current line.

   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode 1)
   #+END_SRC

   Show the lines numbers

   #+BEGIN_SRC emacs-lisp
     (setq display-line-numbers 'visual
           display-line-numbers-current-absolute t
           display-line-numbers-width 4
           display-line-numbers-widen t)
     (global-display-line-numbers-mode)
   #+END_SRC


** Modeline

   Use smart mode line to replace the default ugly mode line

   #+BEGIN_SRC emacs-lisp
  (use-package minions
    :config (minions-mode 1))

  (use-package all-the-icons)

  (setq-default find-file-visit-truename t)

  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-buffer-file-name-style 'truncate-with-project))
   #+END_SRC

   Show the column number on the modeline

   #+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
   #+END_SRC

* Interface
** Completion popup

   Display the completion list in a popup.

   #+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (add-hook 'after-init-hook 'global-company-mode))
   #+END_SRC

** Error reporting

   Display flymake errors in a popup.

   #+BEGIN_SRC emacs-lisp
  (use-package flymake-diagnostic-at-point
    :after flymake
    :config
    (add-hook 'flymake-mode-hook #'flymake-diagnostic-at-point-mode))
   #+END_SRC

** Evil mode

   Evil-mode emulates Vim in Emacs.

   #+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t) ;; required by evil-collection
    (setq evil-want-keybinding nil) ;; required by evil-collection
    (setq evil-search-module 'evil-search)
    (setq evil-ex-complete-emacs-commands nil)
    (setq evil-vsplit-window-right t) ;; like vim's 'splitright'
    (setq evil-split-window-below t) ;; like vim's 'splitbelow'
    (setq evil-shift-round nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1))

  ;; remap Escape to something else to quit insert mode
  (use-package evil-escape
    :after evil
    :init
    (setq-default evil-escape-delay 0.2)
    (setq-default evil-escape-unordered-key-sequence t)
    (setq-default evil-escape-key-sequence "jk")
    (evil-escape-mode))


  ;; vim-like keybindings everywhere in emacs
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  ;; gc operator, like vim-commentary
  (use-package evil-commentary
    :after evil)

  ;; visual hints while editing
  (use-package evil-goggles
    :after evil
    :config
    (setq evil-goggles-duration 0.1)
    (evil-goggles-use-diff-faces)
    (evil-goggles-mode))

  ;; like vim-surround
  (use-package evil-surround
    :after evil
    :commands
    (evil-surround-edit
     evil-Surround-edit
     evil-surround-region
     evil-Surround-region)
    :init
    (evil-define-key 'operator global-map "s" 'evil-surround-edit)
    (evil-define-key 'operator global-map "S" 'evil-Surround-edit)
    (evil-define-key 'visual global-map "S" 'evil-surround-region)
    (evil-define-key 'visual global-map "gS" 'evil-Surround-region))
   #+END_SRC

** Command completion

   =smart M-x= suggests =M-x= commands based on recency and frequency. I don't tend to use it directly but =counsel= uses it to order suggestions.

   #+BEGIN_SRC emacs-lisp
  (use-package smex)
   #+END_SRC

   =ivy= is a generic completion framework which uses the minibuffer. Turning on =ivy-mode= enables replacement of lots of built in =ido= functionality.

   #+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :config
    (ivy-mode t))
   #+END_SRC

   By default =ivy= starts filters with =^=. I don't normally want that and can easily type it manually when I do.

   #+BEGIN_SRC emacs-lisp
  (setq ivy-initial-inputs-alist nil)
   #+END_SRC

   =counsel= is a collection of =ivy= enhanced versions of common Emacs commands. I haven't bound much as =ivy-mode= takes care of most things.

   #+BEGIN_SRC emacs-lisp
  (use-package counsel)
   #+END_SRC

   =swiper= is an =ivy= enhanced version of isearch.

   #+BEGIN_SRC emacs-lisp
  (use-package swiper)
   #+END_SRC

   =hydra= presents menus for =ivy= commands.

   #+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra
    :after ivy)
   #+END_SRC

** Suggest next key

   Suggest next keys to me based on currently entered key combination.

   #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (add-hook 'after-init-hook 'which-key-mode))
   #+END_SRC

** Better undo

   =undo-tree= visualises undo history as a tree for easy navigation.

   #+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :defer t
    :diminish global-undo-tree-mode
    :config
    (global-undo-tree-mode 1))
   #+END_SRC

** Scrolling

   #+BEGIN_SRC emacs-lisp
  ;;; Scrolling.
  ;; Good speed and allow scrolling through large images (pixel-scroll).
  ;; Note: Scroll lags when point must be moved but increasing the number
  ;;       of lines that point moves in pixel-scroll.el ruins large image
  ;;       scrolling. So unfortunately I think we'll just have to live with
  ;;       this.
  (pixel-scroll-mode)
  (setq-default pixel-dead-time 0) ; Never go back to the old scrolling behaviour.
  (setq-default pixel-resolution-fine-flag t) ; Scroll by number of pixels instead of lines (t = frame-char-height pixels).
  (setq-default mouse-wheel-scroll-amount '(1)) ; Distance in pixel-resolution to scroll each mouse wheel event.
  (setq-default mouse-wheel-progressive-speed nil) ; Progressive speed is too fast for me.
   #+END_SRC

** Org mode

   Hide formatting characters

   #+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
   #+END_SRC

   Display list with a bullet point

   #+BEGIN_SRC emacs-lisp
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
   #+END_SRC

   Show bullet points for the header

   #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC

   Make the headers bigger than the text

   #+BEGIN_SRC emacs-lisp
     (custom-set-faces
       '(org-level-1 ((t (:inherit outline-1 :height 1.75))))
       '(org-level-2 ((t (:inherit outline-2 :height 1.5))))
       '(org-level-3 ((t (:inherit outline-3 :height 1.25))))
       '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
     )
   #+END_SRC

   Start the pitch mode to display serif fonts in org mode buffers

   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook #'(lambda () (variable-pitch-mode -1)))
     (add-hook 'org-mode-hook #'variable-pitch-mode)
   #+END_SRC

   Use long lines

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'visual-line-mode)
#+END_SRC

   Show some text in monospace fonts.

   #+BEGIN_SRC emacs-lisp
     (custom-theme-set-faces
      'user
      '(line-number               ((t (:inherit fixed-pitch))))
      '(line-number-current-line  ((t (:inherit fixed-pitch))))
      '(org-block                 ((t (:inherit fixed-pitch))))
      '(org-table                 ((t (:inherit fixed-pitch))))
      '(org-code                  ((t (:inherit fixed-pitch))))
      '(org-document-info         ((t (:foreground "dark orange"))))
      '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
      '(org-link                  ((t (:foreground "royal blue" :underline t))))
      '(org-meta-line             ((t (:inherit (font-lock-comment-face fixed-pitch)))))
      '(org-property-value        ((t (:inherit fixed-pitch))) t)
      '(org-special-keyword       ((t (:inherit (font-lock-comment-face fixed-pitch)))))
      '(org-tag                   ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
      '(org-verbatim              ((t (:inherit (shadow fixed-pitch))))))
   #+END_SRC

** Tree view

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq-default treemacs-collapse-dirs                 (if (executable-find "python") 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-display-in-side-window        t
            treemacs-file-event-delay              5000
            treemacs-file-follow-delay             0.2
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-desc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-width                         35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after treemacs evil)

  (use-package treemacs-projectile
    :after treemacs projectile)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit)
#+END_SRC
* Coding
** Parenthesis

   Highlight parens etc. for improved readability.

   #+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC

   Highlight strings which represent colours. I only want this in programming modes, and I don't want colour names to be highlighted (=x-colors=).

   #+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :config
    (setq rainbow-x-colors nil)
    (add-hook 'prog-mode-hook 'rainbow-mode))
   #+END_SRC

** Project management

   Projectile handles folders which are in version control.

   #+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode))
   #+END_SRC

   Tell projectile to integrate with =ivy= for completion.

   #+BEGIN_SRC emacs-lisp
  (setq projectile-completion-system 'ivy)
   #+END_SRC

   Add some extra completion options via integration with =counsel=. In particular this enables =C-c p SPC= for smart buffer / file search, and =C-c p s s= for search via =ag=.

   There is no function for projectile-grep, but we could use =counsel-git-grep= which is similar. Should I bind that to =C-c p s g=?

   #+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :config
    (add-hook 'after-init-hook 'counsel-projectile-mode))
   #+END_SRC

** Fuzzy search

   =fzf= is a fuzzy file finder which is very quick.

   #+BEGIN_SRC emacs-lisp
  (use-package fzf)
   #+END_SRC

** Git
*** Magit

    Magit is an awesome interface to git. Summon it with `C-x g`.

    #+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands magit-status)
    #+END_SRC

    Use evil keybindings for magit.

    #+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :after magit
    :init
    (setq evil-magit-state 'normal
          evil-magit-use-z-for-folds t))
    #+END_SRC

*** Gutters

    Display line changes in gutter based on git history. Enable it everywhere.

    #+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :diminish git-gutter-mode
    :custom
    (git-gutter:modified-sign " ") ;; two space
    (git-gutter:added-sign " ")    ;; multiple character is OK
    (git-gutter:deleted-sign " ")
    :config
    (set-face-background 'git-gutter:modified "yellow")
    (set-face-background 'git-gutter:added "green")
    (set-face-background 'git-gutter:deleted "red")
    (global-git-gutter-mode 't))
    #+END_SRC

    TimeMachine lets us step through the history of a file as recorded in git.

    #+BEGIN_SRC emacs-lisp
  (use-package git-timemachine)
    #+END_SRC

* Languages
** Find definitions/references

   Use ivy-xref to replace the standard xref to find definitions and references

   #+BEGIN_SRC emacs-lisp
  (use-package ivy-xref
    :ensure t
    :init (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))
   #+END_SRC

** Use eglot (lsp client)

   #+BEGIN_SRC emacs-lisp
  (use-package eglot
    :ensure t
    :config
    (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd")))
   #+END_SRC

** Rust major mode

   #+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t)
   #+END_SRC

** C indentation

   #+BEGIN_SRC emacs-lisp
  (setq c-default-style "bsd"
        c-basic-offset 4)
   #+END_SRC

* Keybindings

  Here are all the bindings of this config.

  #+BEGIN_SRC emacs-lisp
    (use-package general
      :config
      ;; replace default emacs keybindings
      (general-define-key
       "C-s" 'counsel-grep-or-swiper ; search for string in current buffer
       "C-x C-f" 'counsel-find-file  ; C-x C-f use counsel-find-file
       "M-x" 'counsel-M-x           ; replace default M-x with ivy backend
       )

      ;; define our custom bindings
      (general-define-key
       :states '(normal visual insert emacs)
       :prefix "SPC"
       :non-normal-prefix "C-SPC"

       ;; simple command
       "/"   '(counsel-ag :which-key "find")
       "TAB" '(switch-to-other-buffer :which-key "prev buffer")
       "SPC" 'counsel-M-x

       ;; Config
       "c"   '(:ignore t :which-key "Config")
       "ce"  '(edit-config :which-key "edit")
       "cr"  '(reload-config :which-key "reload")

       ;; Project
       "p"   '(:ignore t :which-key "Project")
       "pp"  '(counsel-projectile-switch-project :which-key "switch project")
       "pb"  '(counsel-projectile-switch-to-buffer :which-key "switch buffer")
       "pf"  '(counsel-projectile-find-file :which-key "find file")
       "p/"  '(counsel-projectile-ag :which-key "find in project")
       "p."  '(projectile-find-file-dwim :which-key "browse project")

       ;; Git
       "g"   '(:ignore t :which-key "Git")
       "gs"  '(magit-status :which-key "status")

       ;; Applications
       "a"   '(:ignore t :which-key "Applications")
       "ad"  'dired
       "at"  'treemacs))
  #+END_SRC
