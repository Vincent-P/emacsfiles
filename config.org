* Custom functions
** Edit this config

These two functions allows to edit and reload the config directly in emacs.

#+BEGIN_SRC emacs-lisp
  (defun edit-config ()
    "Edit config.org"
    (interactive)
    (find-file (expand-file-name "config.org" user-emacs-directory)))

  (defun reload-config ()
    "Compile config.org and execute config.el"
    (interactive)
    (require 'org)
    (org-babel-load-file (expand-file-name "config.org" user-emacs-directory))
    (byte-compile-file (expand-file-name "config.el" user-emacs-directory)))
#+END_SRC

* Setup
** Increase garbage collector threshold

The default garbage collection threshold is 800kB, increasing this to 64MB to increase the startup speed.
Do not forget to reset it to a reasonable value after.

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 64000000)

  ;; Restore after startup
  (add-hook 'after-init-hook
            (lambda ()
              (setq gc-cons-threshold 1000000)
              (message "gc-cons-threshold restored to %S"
                       gc-cons-threshold)))
#+END_SRC

** Load custom variables

This makes emacs use the .custom file for its custom variable rather than modifying our init.el file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name ".custom" user-emacs-directory))
  (if (file-exists-p custom-file)
      (load custom-file))
#+END_SRC

** Configure package sources

Add repositories from which we'll load packages. Setting =package-enable-at-startup= to =nil= prevents a second package load and slightly improves startup time.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)
  (setq package-enable-at-startup nil)
#+END_SRC

** Bootstrap use-package

Refresh package if it is needed.
If =use-package= is not installed, install it.

#+BEGIN_SRC emacs-lisp
  (when (not package-archive-contents)
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (message "`use-package' not found.  Installing...")
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-minimum-reported-time 0
        use-package-verbose t
        use-package-compute-statistics t)

  (use-package quelpa-use-package
    :init (setq quelpa-update-melpa-p nil)
    :config (quelpa-use-package-activate-advice))

#+END_SRC

By default all packages should be installed from package manager as that's the usual path. This is equivalent to setting =:ensure t= on each call to =use-package=. To disable set =:ensure nil= (this is done automatically for any packages using =:load-path= so shouldn't generally be needed).

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
#+END_SRC

** Performance trick

Garbage-collect on focus-out, Emacs should feel snappier.

#+BEGIN_SRC emacs-lisp
     (add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

Fix some hangs in Windows

#+BEGIN_SRC emacs-lisp
     (setq w32-get-true-file-attributes nil)
#+END_SRC

* Preferences

Don't display the help screen on startup.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

I prefer lines to wrap.

#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode 1)
#+END_SRC

Let's turn off unwanted window decoration.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode    -1)
  (menu-bar-mode   -1)
#+END_SRC

I don't want the error bell.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

Make the =yes or no= prompts shorter.

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

A common frustration with new Emacs users is the =filename#= files created. This centralises the backup files created as you edit.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )
#+END_SRC

I usually don't want tabs, if I do I can set this buffer-local to =t=. If I just want one tab then use =C-q= (=quoted-insert=) to insert as a literal.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

I *never* want whitespace at the end of lines. Remove it on save.

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Make the fringe less visible.

#+BEGIN_SRC emacs-lisp
  (setq-default left-fringe-width 1)
  (setq-default right-fringe-width 1)
#+END_SRC

* Appearance
** Editor

Set the color scheme, =doom-themes= provides nice themes that work well with =doom-modeline=.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :custom (custom-enabled-themes '(doom-dracula))
    :config
    ;; Global settings (defaults)
    (setq-default doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled

    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    ;; (doom-themes-org-config)
    )
#+END_SRC

=solaire-mode= is  a package compatible with =doom-themes= that highlights the current buffer and darken the others.

#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode
    :hook
    ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
    (minibuffer-setup . solaire-mode-in-minibuffer)
    :config
    (solaire-global-mode +1)
    (solaire-mode-swap-bg))
#+END_SRC

Set a nice font.

#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  (set-face-attribute 'default nil :family "IBM Plex Mono" :height 110)
  (set-face-attribute 'fixed-pitch nil :family "IBM Plex Mono" :height 110)
  (set-face-attribute 'variable-pitch nil :family "Noto Sans" :height 120)

  (set-face-attribute 'mode-line nil :family "Noto Sans")
  (set-face-attribute 'mode-line-inactive nil :family "Noto Sans")

  (set-fontset-font t 'unicode "Noto Emoji" nil 'prepend)
#+END_SRC

Highlight the current line.

#+BEGIN_SRC emacs-lisp
     (global-hl-line-mode 1)
#+END_SRC

Show the lines numbers

#+BEGIN_SRC emacs-lisp
     (setq-default display-line-numbers-type t
                   display-line-numbers-current-absolute t
                   display-line-numbers-width 4
                   display-line-numbers-widen t)
     (add-hook 'text-mode-hook #'display-line-numbers-mode)
     (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+END_SRC


** Modeline

=doom-modeline= is a pretty and fast modeline.

#+BEGIN_SRC emacs-lisp
     (use-package minions
       :config (minions-mode 1))

     (use-package all-the-icons)

     (setq-default find-file-visit-truename t)

     (use-package doom-modeline
       :quelpa (doom-modeline
         :fetcher github
         :repo "seagle0128/doom-modeline")
       :hook (after-init . doom-modeline-mode)
       :config

       ;; How tall the mode-line should be (only respected in GUI Emacs).
       (setq doom-modeline-height 70)

       ;; How wide the mode-line bar should be (only respected in GUI Emacs).
       (setq doom-modeline-bar-width 3)

       ;; Determines the style used by `doom-modeline-buffer-file-name'.
       ;;
       ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
       ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
       ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
       ;;   truncate-with-project => emacs/l/comint.el
       ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
       ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
       ;;   truncate-all => ~/P/F/e/l/comint.el
       ;;   relative-from-project => emacs/lisp/comint.el
       ;;   relative-to-project => lisp/comint.el
       ;;   file-name => comint.el
       ;;   buffer-name => comint.el<2> (uniquify buffer name)
       ;;
       ;; If you are expereicing the laggy issue, especially while editing remote files
       ;; with tramp, please try `file-name' style.
       ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
       (setq doom-modeline-buffer-file-name-style 'truncate-with-project)

       ;; What executable of Python will be used (if nil nothing will be showed).
       (setq doom-modeline-python-executable "python")

       ;; Whether show `all-the-icons' or not (if nil nothing will be showed).
       (setq doom-modeline-icon t)

       ;; Whether show the icon for major mode. It respects `doom-modeline-icon'.
       (setq doom-modeline-major-mode-icon t)

       ;; Display color icons for `major-mode'. It respects `all-the-icons-color-icons'.
       (setq doom-modeline-major-mode-color-icon t)

       ;; Whether display minor modes or not. Non-nil to display in mode-line.
       (setq doom-modeline-minor-modes t)

       ;; If non-nil, a word count will be added to the selection-info modeline segment.
       (setq doom-modeline-enable-word-count t)

       ;; If non-nil, only display one number for checker information if applicable.
       (setq doom-modeline-checker-simple-format t)

       ;; Whether display perspective name or not. Non-nil to display in mode-line.
       (setq doom-modeline-persp-name t)

       ;; Whether display `lsp' state or not. Non-nil to display in mode-line.
       (setq doom-modeline-lsp t)

       ;; Whether display github notifications or not. Requires `ghub` package.
       (setq doom-modeline-github nil)

       ;; The interval of checking github.
       (setq doom-modeline-github-interval (* 30 60))

       ;; Whether display environment version or not.
       (setq doom-modeline-version nil)

       ;; Whether display mu4e notifications or not. Requires `mu4e-alert' package.
       (setq doom-modeline-mu4e nil)
       )
#+END_SRC

Show the column number on the modeline

#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC

* Interface
** Completion popup

Display the completion list in a popup.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish
    :config

    (setq company-idle-delay .1)
    (setq company-minimum-prefix-length 2)

  ; The current candidate isn't displayed inline except when there's only one left.
  ; replace company-preview-if-just-one-frontend by company-preview-frontend to fix this
    (setq company-frontends
     '(company-pseudo-tooltip-unless-just-one-frontend
       company-preview-frontend
       company-echo-metadata-frontend))

  ; cancel selections by typing non-matching characters
    (setq company-require-match 'never)

    (setq global-company-mode t)
  ; use tab to autocomplete
    (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)

  ; shift tab to go backwards
    (define-key company-active-map (kbd "S-TAB") 'company-select-previous)
    (define-key company-active-map (kbd "<backtab>") 'company-select-previous))
#+END_SRC

** Error reporting

Use flycheck to have better errors reports.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck)
#+END_SRC

** Evil mode

Evil-mode emulates Vim in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t) ;; required by evil-collection
    (setq evil-want-keybinding nil) ;; required by evil-collection
    (setq evil-search-module 'evil-search)
    (setq evil-ex-complete-emacs-commands nil)
    (setq evil-vsplit-window-right t) ;; like vim's 'splitright'
    (setq evil-split-window-below t) ;; like vim's 'splitbelow'
    (setq evil-shift-round nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1))

  ;; remap Escape to something else to quit insert mode
  (use-package evil-escape
    :after evil
    :init
    (setq-default evil-escape-delay 0.2)
    (setq-default evil-escape-unordered-key-sequence t)
    (setq-default evil-escape-key-sequence "jk")
    (evil-escape-mode))


  ;; vim-like keybindings everywhere in emacs
  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-company-use-tng nil)
    :init
    (evil-collection-init))

  ;; gc operator, like vim-commentary
  (use-package evil-commentary
    :after evil)

  ;; visual hints while editing
  (use-package evil-goggles
    :after evil
    :config
    (setq evil-goggles-duration 0.1)
    (evil-goggles-use-diff-faces)
    (evil-goggles-mode))

  ;; like vim-surround
  (use-package evil-surround
    :after evil
    :init
    (evil-define-key 'operator global-map "s" 'evil-surround-edit)
    (evil-define-key 'operator global-map "S" 'evil-Surround-edit)
    (evil-define-key 'visual global-map "S" 'evil-surround-region)
    (evil-define-key 'visual global-map "gS" 'evil-Surround-region))
#+END_SRC

** Command completion

=ivy= is a generic completion framework which uses the minibuffer. Turning on =ivy-mode= enables replacement of lots of built in =ido= functionality.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :config
    (ivy-mode t))

  (use-package all-the-icons-ivy
    :after (all-the-icons ivy)
    :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window))
    :config
    (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
    (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
    (all-the-icons-ivy-setup))
#+END_SRC

By default =ivy= starts filters with =^=. I don't normally want that and can easily type it manually when I do.

#+BEGIN_SRC emacs-lisp
  (setq-default ivy-initial-inputs-alist nil)
#+END_SRC

Move the ivy frame to a postframe (popup window).

#+BEGIN_SRC emacs-lisp
  (use-package ivy-posframe
    :config
    ;; display at `ivy-posframe-style'
    ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
    ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
    ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
    ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
    (setq ivy-posframe-parameters
          '((left-fringe . 8)
            (right-fringe . 8)))
    (ivy-posframe-mode 1))
#+END_SRC

=counsel= is a collection of =ivy= enhanced versions of common Emacs commands. I haven't bound much as =ivy-mode= takes care of most things.

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :after ivy
    :config
    (use-package smex)
    (use-package flx)
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    ;; intentional space before end of string
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-re-builders-alist
          '((counsel-ag . ivy--regex-plus)
            (t . ivy--regex-fuzzy))))
#+END_SRC

=swiper= is an =ivy= enhanced version of isearch.

#+BEGIN_SRC emacs-lisp
  (use-package swiper)
#+END_SRC

=hydra= presents menus for =ivy= commands.

#+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra
    :after ivy)
#+END_SRC

** Suggest next key

Suggest next keys to me based on currently entered key combination.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (add-hook 'after-init-hook 'which-key-mode))
#+END_SRC

** Scrolling

#+BEGIN_SRC emacs-lisp
  ;; Mouse & Smooth Scroll
  ;; Scroll one line at a time (less "jumpy" than defaults)
  (when (display-graphic-p)
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
          mouse-wheel-progressive-speed nil))
  (setq scroll-step 1
        scroll-margin 0
        scroll-conservatively 100000)
#+END_SRC

** Distraction free

#+BEGIN_SRC emacs-lisp
     (use-package olivetti
       :config
       (setq olivetti-hide-mode-line t))
#+END_SRC

** Org mode

#+BEGIN_SRC emacs-lisp
     (use-package org
       :mode ("\\.org\\'" . org-mode)
       :custom
       (org-return-follows-link t)
       :custom-face
       (org-document-title ((t (:weight bold :height 1.5))))
       (org-done ((t (:strike-through t :weight bold))))
       (org-headline-done ((t (:strike-through t))))
       (org-level-1 ((t (:weight bold :height 1.3 :background nil))))
       (org-level-2 ((t (:weight normal :height 1.2 :background nil))))
       (org-level-3 ((t (:weight normal :height 1.1 :background nil))))
       (org-image-actual-width '(600))
       :config
       (setq org-startup-indented t
             org-ellipsis " ⤵ " ;; folding symbol
             org-pretty-entities t
             org-hide-emphasis-markers t
             ;; show actually italicized text instead of /italicized text/
             org-agenda-block-separator ""
             org-fontify-whole-heading-line t
             org-fontify-done-headline t
             org-fontify-quote-and-verse-blocks t)
       (add-to-list 'org-structure-template-alist '("el" "#+BEGIN_SRC emacs-lisp :tangle yes?\n\n#+END_SRC")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
               '(lambda ()
                  (setq line-spacing 0.2) ;; Add more line padding for readability
                  (variable-pitch-mode 1) ;; All fonts with variable pitch.
                  (olivetti-mode)
                  (olivetti-set-width 120)
                  (display-line-numbers-mode -1)
                  (mapc
                   (lambda (face) ;; Other fonts with fixed-pitch.
                     (set-face-attribute face nil :inherit 'fixed-pitch))
                   (list 'org-code
                         'org-link
                         'org-block
                         'org-table
                         'org-verbatim
                         'org-block-begin-line
                         'org-block-end-line
                         'org-meta-line
                         'org-document-info-keyword))))
#+END_SRC

Hide formatting characters

#+BEGIN_SRC emacs-lisp
  (setq-default org-hide-emphasis-markers t)
#+END_SRC

Display list with a bullet point

#+BEGIN_SRC emacs-lisp
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+END_SRC

Show bullet points for the header

#+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :config
       (setq org-bullets-bullet-list '(" ")) ;; no bullets, needs org-bullets package
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** Tree view

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config

    (set-face-attribute 'treemacs-file-face nil :family "Noto Sans")
    (set-face-attribute 'treemacs-directory-face nil :family "Noto Sans")
    (set-face-attribute 'treemacs-root-face nil :family "Noto Sans")

    (progn
      (setq-default treemacs-collapse-dirs                 (if (executable-find "python") 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-display-in-side-window        t
            treemacs-file-event-delay              5000
            treemacs-file-follow-delay             0.2
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-desc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-width                         35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after treemacs evil)

  (use-package treemacs-projectile
    :after treemacs projectile)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit)
#+END_SRC

** Windows configs

Use =eyebrowse= to have windows configs (like workspaces in i3, or virtual desktops).

#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :config
    (eyebrowse-mode))
#+END_SRC

* Coding
** Parenthesis

Highlight parens etc. for improved readability.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** Project management

Projectile handles folders which are in version control.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode))
#+END_SRC

Tell projectile to integrate with =ivy= for completion.

#+BEGIN_SRC emacs-lisp
  (setq projectile-completion-system 'ivy)
#+END_SRC

Add some extra completion options via integration with =counsel=. In particular this enables =C-c p SPC= for smart buffer / file search, and =C-c p s s= for search via =ag=.

There is no function for projectile-grep, but we could use =counsel-git-grep= which is similar. Should I bind that to =C-c p s g=?

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :config
    (add-hook 'after-init-hook 'counsel-projectile-mode))
#+END_SRC

By default the compile command variable is not buffer-local, so it is impossible to set it in a dir- local file.

#+BEGIN_SRC emacs-lisp
(make-variable-buffer-local 'compile-command)
#+END_SRC

** Git

Magit is an awesome interface to git. Summon it with `C-x g`.

#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC

Use evil keybindings for magit.

#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :after magit
    :init
    (setq evil-magit-state 'normal
          evil-magit-use-z-for-folds t))
#+END_SRC

* Languages
** Find definitions/references

Use ivy-xref to replace the standard xref to find definitions and references

#+BEGIN_SRC emacs-lisp
  (use-package ivy-xref
    :init (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))
#+END_SRC

** Snippets

Use a snippet plugin for the lsp servers.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet)
  (use-package ivy-yasnippet)
#+END_SRC

** Rust major mode

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode)
#+END_SRC

** C / C++ Configuration

Set the default formatting when formmating in emacs and indenting.

#+BEGIN_SRC emacs-lisp
  (setq c-default-style "bsd"
        c-basic-offset 4)
#+END_SRC

Use tabs

#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook
            '(lambda ()
               (setq indent-tabs-mode t)
               ))
#+END_SRC

Install a plugin for the language server =ccls=

#+BEGIN_SRC emacs-lisp
  (use-package ccls
    :after projectile
    :custom
    (ccls-args nil)
    (ccls-executable (executable-find "ccls"))
    (projectile-project-root-files-top-down-recurring
     (append '("compile_commands.json" ".ccls")
             projectile-project-root-files-top-down-recurring))
    :config (push ".ccls-cache" projectile-globally-ignored-directories)
    (setq ccls-sem-highlight-method 'font-lock)


    ;; For rainbow semantic highlighting
    ;; (ccls-use-default-rainbow-sem-highlight)
    )
#+END_SRC

Install some plugins to use cmake

#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :after projectile
    :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'")
    :config
    (projectile-register-project-type 'cmake-ninja '("CMakeLists.txt")
                                      :compilation-dir "build"
                                      :src-dir "src"
                                      :compile "ninja"
                                      :run "ninja run"
                                      :configure "cd %s/build && cmake .."))

  (use-package cmake-font-lock
    :after (cmake-mode)
    :hook (cmake-mode . cmake-font-lock-activate))
#+END_SRC

In order to compile on Windows, some enviroment variables are needed to find the Visual Studio toolchain.
It is hardcoded for Visual Studio 2019 Community.

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (setenv "PATH"
            (concat
             "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\bin\\HostX64\\x64"
             path-separator
             "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\VC\\VCPackages"
             path-separator
             "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow"
             path-separator
             "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TeamFoundation\\Team Explorer"
             path-separator
             "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\bin\\Roslyn"
             path-separator
             "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Team Tools\\Performance Tools\\x64"
             path-separator
             "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Team Tools\\Performance Tools"
             path-separator
             "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Common\\VSPerfCollectionTools\\vs2019\\\\x64"
             path-separator
             "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Common\\VSPerfCollectionTools\\vs2019\\"
             path-separator
             "C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.6.1 Tools\\x64\\"
             path-separator
             "C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.18362.0\\x64"
             path-separator
             "C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64"
             path-separator
             "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\\\MSBuild\\Current\\Bin"
             path-separator
             "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319"
             path-separator
             "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\"
             path-separator
             "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\Tools\\"
             path-separator
             (getenv "PATH")))

    (setenv "INCLUDE"
            (concat
             "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include"
             path-separator
             "C:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.6.1\\include\\um"
             path-separator
             "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\ucrt"
             path-separator
             "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\shared"
             path-separator
             "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\um"
             path-separator
             "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\winrt"
             path-separator
             "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\cppwinrt"
             path-separator))

    (setenv "LIB"
            (concat
             "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\lib\\x64"
             path-separator
             "C:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.6.1\\lib\\um\\x64"
             path-separator
             "C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.18362.0\\ucrt\\x64"
             path-separator
             "C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.18362.0\\um\\x64"
             path-separator))

    (setenv "LIBPATH"
            (concat
             "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\lib\\x64"
             path-separator
             "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\lib\\x86\\store\\references"
             path-separator
             "C:\\Program Files (x86)\\Windows Kits\\10\\UnionMetadata\\10.0.18362.0"
             path-separator
             "C:\\Program Files (x86)\\Windows Kits\\10\\References\\10.0.18362.0"
             path-separator
             "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319")))
#+END_SRC

** Shaders

#+BEGIN_SRC emacs-lisp
  (use-package glsl-mode
    :mode "\\.\\(vert\\|frag\\)\\'")
#+END_SRC

** Maniascript Config

Make a minimal major-mode for maniascript.

#+BEGIN_SRC emacs-lisp
  (setq maniascript-mode-syntax-table
        (let ( (synTable (make-syntax-table c-mode-syntax-table)))
          ;; syntax-table things
          synTable))

  (setq maniascript-font-lock-keywords
        (let* (
               ;; define several category of keywords
               (x-keywords '("break" "case" "continue" "default" "else" "for" "foreach" "if" "return" "switchtype" "switch" "while"))
               (x-declare '("declare" "metadata" "netread" "netwrite" "persistent" "as" "in"))
               (x-types '("Void" "Integer" "Real" "Boolean" "Text" "Vec2" "Vec3" "Int3" "Ident"))
               (x-constants '("NullId" "Null" "True" "False"))
               (x-functions '("_" "log" "wait" "sleep" "assert" "count" "sortkeyreverse" "sortkey" "sort" "reverse" "removekey" "remove"  "addfirst" "add" "existskey" "exists" "keyof" "containsonly" "containsoneof" "slice" "tojson" "fromjson" "clear"))
               (x-variables '("This"))

               ;; generate regex string for each category of keywords
               (x-keywords-regexp (regexp-opt x-keywords 'words))
               (x-declare-regexp (regexp-opt x-declare 'words))
               (x-types-regexp (regexp-opt x-types 'words))
               (x-constants-regexp (regexp-opt x-constants 'words))
               (x-functions-regexp (regexp-opt x-functions 'words))
               (x-variables-regexp (regexp-opt x-variables 'words))

               (x-directives-regexp "\\#\\(Include\\|Setting\\|RequireContext\\|Const\\|Struct\\|Extends\\)")
               (x-multistring-regexp "\"\"\" \\.*?\"\"\"")
               )

          `(
            (,x-keywords-regexp . font-lock-keyword-face)
            (,x-declare-regexp . font-lock-keyword-face)
            (,x-types-regexp . font-lock-type-face)
            (,x-constants-regexp . font-lock-constant-face)
            (,x-functions-regexp . font-lock-builtin-face)
            (,x-variables-regexp . font-lock-variable-name-face)

            (,x-directives-regexp . font-lock-preprocessor-face)
            ;; note: order above matters, because once colored, that part won't change.
            ;; in general, put longer words first
            )))

  (define-derived-mode maniascript-mode prog-mode "maniascript"
    (setq font-lock-defaults '((maniascript-font-lock-keywords)))

    (setq-local comment-start "/*")
    (setq-local comment-start-skip "/\\*+[ \t]*")
    (setq-local comment-end "*/")
    (setq-local comment-end-skip "[ \t]*\\*+/")
    )

  (add-to-list 'auto-mode-alist '("\\.Script.txt\\'" . maniascript-mode))
#+END_SRC

** Python

Use the excellent package =elpy= to provide a nice python integration.


#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+END_SRC

** Use lsp client

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook (prog-mode . lsp)
    :init
    (setq lsp-prefer-flymake nil)
    :config

    (add-to-list 'lsp-language-id-configuration '(maniascript-mode . "maniascript"))

    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection "manialsp.exe")
                      :major-modes '(maniascript-mode)
                      :server-id 'manialsp))
    )

  (use-package lsp-ui)
  (use-package company-lsp :after company  company-lsp
    :config
    (setq company-transformers nil company-lsp-async t company-lsp-cache-candidates nil))
  (use-package lsp-treemacs)
  (use-package dap-mode)

  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+END_SRC

* Keybindings

Here are all the bindings of this config.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    ;; replace default emacs keybindings
    (general-define-key
     "C-s" 'counsel-grep-or-swiper ; search for string in current buffer
     "C-x C-f" 'counsel-find-file  ; C-x C-f use counsel-find-file
     "M-x" 'counsel-M-x            ; replace default M-x with ivy backend

     ;; Window configs shortcuts
     "M-q" 'eyebrowse-prev-window-config
     "M-w" 'eyebrowse-next-window-config
     "M-1" 'eyebrowse-switch-to-window-config-1
     "M-2" 'eyebrowse-switch-to-window-config-2
     "M-3" 'eyebrowse-switch-to-window-config-3
     "M-4" 'eyebrowse-switch-to-window-config-4
     "M-5" 'eyebrowse-switch-to-window-config-5
     )

    (general-define-key
     :states '(normal visual emacs)
     ;; LSP
     "gr"  '(lsp-find-references :which-key "find references")
     "gd"  '(lsp-find-definition :which-key "find definition")
     )

    ;; define normal state keybindings
    (general-define-key
     :states '(normal visual emacs)
     :prefix "SPC"

     ;; simple command
     "/"   '(counsel-ag :which-key "find")
     "TAB" '(evil-prev-buffer :which-key "prev buffer")
     "SPC" 'counsel-M-x

     ;; Config
     "c"   '(:ignore t :which-key "Config")
     "ce"  '(edit-config :which-key "edit")
     "cr"  '(reload-config :which-key "reload")

     ;; Project
     "p"   '(:ignore t :which-key "Project")
     "pp"  '(counsel-projectile-switch-project :which-key "switch project")
     "pb"  '(counsel-projectile-switch-to-buffer :which-key "switch buffer")
     "pf"  '(counsel-projectile-find-file :which-key "find file")
     "p/"  '(counsel-projectile-ag :which-key "find in project")
     "p."  '(projectile-find-file-dwim :which-key "browse project")
     "p."  '(projectile-find-file-dwim :which-key "browse project")
     "pc"  '(projectile-compile-project :which-key "compile")
     "pr"  '(projectile-run-project :which-key "run")

     ;; Files
     "f"   '(:ignore t :which-key "Files")
     "ff"  '(counsel-find-file :which-key "Find file")
     "fo"  '(projectile-find-other-file :which-key "Find other file")

     ;; LSP
     "l"   '(:ignore t :which-key "LSP")
     "ls"  '(counsel-imenu :which-key "list symbols")
     "ln"  '(lsp-rename :which-key "rename symbol")

     ;; Buffer
     "b"   '(counsel-ibuffer :which-key "switch buffer")

     ;; Git
     "g"   '(:ignore t :which-key "Git")
     "gs"  '(magit-status :which-key "status")

     ;; Applications
     "a"   '(:ignore t :which-key "Applications")
     "ad"  'dired
     "at"  'treemacs)


    ;; define insert state key bindings
    (general-define-key
     "C-SPC"  'company-complete))
#+END_SRC
